{
  "articles": [
    {
      "path": "index.html",
      "title": "RSCool online",
      "description": "ICS 2021. I hope you enjoy it!\n",
      "author": [],
      "contents": "\n\n\n\n\n",
      "last_modified": "2021-10-07T09:07:27+01:00"
    },
    {
      "path": "j3.0.1_pacotes_copy.html",
      "title": "Main Packages & Tools",
      "author": [],
      "contents": "\n\n\n\n",
      "last_modified": "2021-10-07T09:07:29+01:00"
    },
    {
      "path": "j3.0.2_boaspraticas_copy.html",
      "title": "R as a Software",
      "author": [],
      "contents": "\n\n\n\n",
      "last_modified": "2021-10-07T09:07:29+01:00"
    },
    {
      "path": "j3.0.3_glossario_copy.html",
      "title": "R as a Software",
      "author": [],
      "contents": "\n\n\n\n",
      "last_modified": "2021-10-07T09:07:30+01:00"
    },
    {
      "path": "j3.1_linguagem_copy.html",
      "title": "R as a Language (course)",
      "author": [],
      "contents": "\nApp.1: LINGUAGEM\nComponentes da Linguagem\n<-: o ‘assignment operator’\nCriação de variáveis\n\n\nvar_numeric <- c(2.5  ,3.5 ,6.5  , -3.5, 0 , 7.7) \n\nvar_integer <- c(2    ,3    ,6   , -3,   2,   9)\n\nvar_factor <- factor (c(\"alto\",\"baixo\",\"baixo\", \"alto\", \"alto\", \"baixo\"))\n\nvar_char <- c(\"João\",\"Rute\",\"Pedro\", \"Filipa\", \"Ana\", \"Fatima\")\n\nvar_log <- c(TRUE,TRUE,TRUE,FALSE,FALSE,TRUE)\n\nvar_integerNA <- c(2    ,3    ,NA   , -3, NA, NA)\n\n\n\nCriação de uma base\n\nDF <- data.frame (var_char,var_numeric,var_integer,var_factor,var_log,var_integerNA)\n\n\n\n\n\nObjectos mais frequentes\nVECTORES\nnumeric\n\n[1]  2.5  3.5  6.5 -3.5  0.0  7.7\n\ninteger\n\n[1]  2  3  6 -3  2  9\n\nfactor\n\n[1] alto  baixo baixo alto  alto  baixo\nLevels: alto baixo\n\ncharacter\n\n[1] \"João\"   \"Rute\"   \"Pedro\"  \"Filipa\" \"Ana\"    \"Fatima\"\n\nlogical\n\n[1]  TRUE  TRUE  TRUE FALSE FALSE  TRUE\n\nDataframes\n\n  var_char var_numeric var_integer var_factor var_log var_integerNA\n1     João         2.5           2       alto    TRUE             2\n2     Rute         3.5           3      baixo    TRUE             3\n3    Pedro         6.5           6      baixo    TRUE            NA\n4   Filipa        -3.5          -3       alto   FALSE            -3\n5      Ana         0.0           2       alto   FALSE            NA\n6   Fatima         7.7           9      baixo    TRUE            NA\n\nTables\n\n\ntable (var_factor)\n\n\nvar_factor\n alto baixo \n    3     3 \n\nFigures\n\n\nplot (var_numeric)\n\n\n\n\n\nOperadores aritméticos\nOperador\nDescrição\n+\naddition\n-\nsubtraction\n*\nmultiplication\n/\ndivision\n^ or **\nexponentiation\nx %/% y\ninteger division 5%/%2 is 2\n\nOperadores lógicos\nOperador\nDescrição\n<\nless than\n<=\nless than or equal to\n>\ngreater than\n>=\ngreater than or equal to\n==\nexactly equal to\n!=\nnot equal to\n!x\nNot x\nx\ny\nx & y\nx E y\nis.na(x)\ntestar se x tem NAs\n\nFunções (a): básicas\nc(): combine or concatenate\n\n\nc  (25   , 33  ,  30  , 42  ,  26  ,  28) \n\n\n[1] 25 33 30 42 26 28\n\nseq(): sequence\n\n\nseq (1,6)\n\n\n[1] 1 2 3 4 5 6\n\nrep(): replicate\n\n\nrep (2017, 6)    # replicate 2017 six times    \n\n\n[1] 2017 2017 2017 2017 2017 2017\n\n###Funções mais comuns | Função | Descrição | | :— | :—- | | seq(from , to, by) | generate a sequence | | rep(x, ntimes) | repeat x n times | | cut(x, n) | divide continuous variable in factor with n levels | | sort (x) | ordenar | | length (x) | extensão |\ncbind(object, object, …) # combine objects as columns rbind(object, object, …) # combine objects as rows\n\nFunções (b): Variáveis\nCalculating over variables\n\n\nlength(DF$var_numeric)\n\n\n[1] 6\n\nsum(DF$var_numeric)\n\n\n[1] 16.7\n\nmean (DF$var_numeric)\n\n\n[1] 2.783333\n\nmedian(DF$var_numeric)\n\n\n[1] 3\n\nsort  (DF$var_numeric)  \n\n\n[1] -3.5  0.0  2.5  3.5  6.5  7.7\n\ntable (DF$var_factor)\n\n\n\n alto baixo \n    3     3 \n\n\n\nclass (DF$var_numeric)\n\n\n[1] \"numeric\"\n\nclass (DF$var_integer)\n\n\n[1] \"numeric\"\n\nclass (  DF$var_factor)\n\n\n[1] \"factor\"\n\nclass (  DF$var_char)\n\n\n[1] \"character\"\n\nMissings (NA)\n\n\nis.na(DF$var_integerNA)\n\n\n[1] FALSE FALSE  TRUE FALSE  TRUE  TRUE\n\n# !is.na(DF$var_integerNA)\n\n\n\n\n\ntable (is.na(DF$var_integerNA) )\n\n\n\nFALSE  TRUE \n    3     3 \n\nParênteses retos sobre variáveis\n\n\nDF$var_num\n\n\n[1]  2.5  3.5  6.5 -3.5  0.0  7.7\n\nDF$var_num [1]   \n\n\n[1] 2.5\n\nDF$var_num [4]  \n\n\n[1] -3.5\n\nDF$var_num [1:3]\n\n\n[1] 2.5 3.5 6.5\n\nDF$var_num [2:5]\n\n\n[1]  3.5  6.5 -3.5  0.0\n\nDF$var_num [4:1]\n\n\n[1] -3.5  6.5  3.5  2.5\n\nDF$var_num [-1]      # negative index\n\n\n[1]  3.5  6.5 -3.5  0.0  7.7\n\nDF$var_num [20]  # Out-of-Range Index = NA\n\n\n[1] NA\n\nFunções (c): bases de dados\n\n\nclass (DF)     # class of the object     \n\n\n[1] \"data.frame\"\n\nnrow (DF) # number of rows     \n\n\n[1] 6\n\nncol (DF)   # number of columns     \n\n\n[1] 6\n\ndim(DF)  # dimension (rows & columns)   \n\n\n[1] 6 6\n\nobject.size(DF) # size in bytes\n\n\n2472 bytes\n\nnames (DF)  # names of variables\n\n\n[1] \"var_char\"      \"var_numeric\"   \"var_integer\"   \"var_factor\"   \n[5] \"var_log\"       \"var_integerNA\"\n\nhead (DF) # head of the dataframe (first 6 observations)\n\n\n  var_char var_numeric var_integer var_factor var_log var_integerNA\n1     João         2.5           2       alto    TRUE             2\n2     Rute         3.5           3      baixo    TRUE             3\n3    Pedro         6.5           6      baixo    TRUE            NA\n4   Filipa        -3.5          -3       alto   FALSE            -3\n5      Ana         0.0           2       alto   FALSE            NA\n6   Fatima         7.7           9      baixo    TRUE            NA\n\nhead (DF, 13)  # first 13 observations\n\n\n  var_char var_numeric var_integer var_factor var_log var_integerNA\n1     João         2.5           2       alto    TRUE             2\n2     Rute         3.5           3      baixo    TRUE             3\n3    Pedro         6.5           6      baixo    TRUE            NA\n4   Filipa        -3.5          -3       alto   FALSE            -3\n5      Ana         0.0           2       alto   FALSE            NA\n6   Fatima         7.7           9      baixo    TRUE            NA\n\ntail (DF)  # tail of the dataframe (last 6 observations)\n\n\n  var_char var_numeric var_integer var_factor var_log var_integerNA\n1     João         2.5           2       alto    TRUE             2\n2     Rute         3.5           3      baixo    TRUE             3\n3    Pedro         6.5           6      baixo    TRUE            NA\n4   Filipa        -3.5          -3       alto   FALSE            -3\n5      Ana         0.0           2       alto   FALSE            NA\n6   Fatima         7.7           9      baixo    TRUE            NA\n\ntail (DF, 10)   # last 10 observations\n\n\n  var_char var_numeric var_integer var_factor var_log var_integerNA\n1     João         2.5           2       alto    TRUE             2\n2     Rute         3.5           3      baixo    TRUE             3\n3    Pedro         6.5           6      baixo    TRUE            NA\n4   Filipa        -3.5          -3       alto   FALSE            -3\n5      Ana         0.0           2       alto   FALSE            NA\n6   Fatima         7.7           9      baixo    TRUE            NA\n\nsummary(DF)   # Summary for each variable of the dataframe\n\n\n   var_char          var_numeric      var_integer     var_factor\n Length:6           Min.   :-3.500   Min.   :-3.000   alto :3   \n Class :character   1st Qu.: 0.625   1st Qu.: 2.000   baixo:3   \n Mode  :character   Median : 3.000   Median : 2.500             \n                    Mean   : 2.783   Mean   : 3.167             \n                    3rd Qu.: 5.750   3rd Qu.: 5.250             \n                    Max.   : 7.700   Max.   : 9.000             \n                                                                \n  var_log        var_integerNA    \n Mode :logical   Min.   :-3.0000  \n FALSE:2         1st Qu.:-0.5000  \n TRUE :4         Median : 2.0000  \n                 Mean   : 0.6667  \n                 3rd Qu.: 2.5000  \n                 Max.   : 3.0000  \n                 NA's   :3        \n\nstr (DF) # Structure of the dataframe\n\n\n'data.frame':   6 obs. of  6 variables:\n $ var_char     : chr  \"João\" \"Rute\" \"Pedro\" \"Filipa\" ...\n $ var_numeric  : num  2.5 3.5 6.5 -3.5 0 7.7\n $ var_integer  : num  2 3 6 -3 2 9\n $ var_factor   : Factor w/ 2 levels \"alto\",\"baixo\": 1 2 2 1 1 2\n $ var_log      : logi  TRUE TRUE TRUE FALSE FALSE TRUE\n $ var_integerNA: num  2 3 NA -3 NA NA\n\nParênteses retos sobre bases de dados\n\n\nDF\n\n\n  var_char var_numeric var_integer var_factor var_log var_integerNA\n1     João         2.5           2       alto    TRUE             2\n2     Rute         3.5           3      baixo    TRUE             3\n3    Pedro         6.5           6      baixo    TRUE            NA\n4   Filipa        -3.5          -3       alto   FALSE            -3\n5      Ana         0.0           2       alto   FALSE            NA\n6   Fatima         7.7           9      baixo    TRUE            NA\n\nDF [1  ,6 ]     #  linha 1     , coluna 6\n\n\n[1] 2\n\nDF [1  , ]     # linha 1     , colunas todas\n\n\n  var_char var_numeric var_integer var_factor var_log var_integerNA\n1     João         2.5           2       alto    TRUE             2\n\nDF [ ,6 ]      # linhas todas, coluna 6\n\n\n[1]  2  3 NA -3 NA NA\n\nDF [1:5, ]   # linhas 1 a 5  , colunas todas\n\n\n  var_char var_numeric var_integer var_factor var_log var_integerNA\n1     João         2.5           2       alto    TRUE             2\n2     Rute         3.5           3      baixo    TRUE             3\n3    Pedro         6.5           6      baixo    TRUE            NA\n4   Filipa        -3.5          -3       alto   FALSE            -3\n5      Ana         0.0           2       alto   FALSE            NA\n\nDF [ , 3:6]   # linhas todas  , colunas 3 a 6  \n\n\n  var_integer var_factor var_log var_integerNA\n1           2       alto    TRUE             2\n2           3      baixo    TRUE             3\n3           6      baixo    TRUE            NA\n4          -3       alto   FALSE            -3\n5           2       alto   FALSE            NA\n6           9      baixo    TRUE            NA\n\nDF [1:3,4:6]\n\n\n  var_factor var_log var_integerNA\n1       alto    TRUE             2\n2      baixo    TRUE             3\n3      baixo    TRUE            NA\n\nDF [c(1,2,3), c(4,5,6)]\n\n\n  var_factor var_log var_integerNA\n1       alto    TRUE             2\n2      baixo    TRUE             3\n3      baixo    TRUE            NA\n\nDF [  ,-c(1,2)]   # linhas todas, colunas todas menos 1 e 2\n\n\n  var_integer var_factor var_log var_integerNA\n1           2       alto    TRUE             2\n2           3      baixo    TRUE             3\n3           6      baixo    TRUE            NA\n4          -3       alto   FALSE            -3\n5           2       alto   FALSE            NA\n6           9      baixo    TRUE            NA\n\n\n\n\n\n",
      "last_modified": "2021-10-07T09:07:31+01:00"
    },
    {
      "path": "j3.2_workspace_copy.html",
      "title": "Gestão do Workspace",
      "author": [],
      "contents": "\nGestão do Workspace (ApêndiceWeb)\nMomentos básicos de uma sessão R\n\n\n\nO ficheiro .Rproj\nPreparação do ambiente de trabalho com a criação de um ficheiro .Rproj\n\nAntes de iniciar R.Studio: criar a pasta do projeto\n\n\nIniciar sessão R.Studio (clique no ícono) e digitar:\nNew Project -> Existing Directory -> NomeDaPasta -> Create Project\n\n\nIniciar sessão\n\nClicar no ficheiro .Rproj\n\n\nObter informação sobre a sessaõ R\n\nsessionInfo()     \n\n\n\n\nOpção numero de digitos para a sessão\n\n\noptions(digits=4)\n\n\n\n\n\nWorking directory (wd)\nLocalizar o wd\n\ngetwd()\n\n\n\n\nMudar localização wd\n\nsetwd (\"/Users/Q/My_R/R_Project1\")      \n\n\n\n\nR utiliza / (forward slashes) para designar subdirectorios (diferente ao uso no Windows, ugual a Mac e Unix)\nListar os ficheiros do wd\n\nlist.files()\n\n\n\n\n\nA memoria ‘ram’ do Workspace\nListar objectos ativos nos workspace\n\nls ( )         # listar os objetos da sessão\nls(pat = \"c\")  # listar objetos que contêm ‘c’ nos seus nomes\nls(pat= \"^c\")  #  listar objects que comecem com  ‘c’\nls(pos=2)     # Check the contents of the file that has been attached \n\n\n\n\nRemover objectos ativar\n\n\n\nrm(“var1” ) # remover objeto “var1”\n\nrm(list =ls() ) # remover todos os objetos da sessão\nrm(list=setdiff(ls(), “B”)) # remover todo menos “B”\nrm(list=setdiff(ls(), c(“W”, “X”))) # remover todo menos “W” e “X” \n\n\n\n\nPacotes\nInstalar pacotes externos\n\ninstall.packages (\"PackageName\")\n\n\n\n\nActivar pacotes já instalados\n\nlibrary (PackageName)       \n      # Or: clicking packages on Window4/ Tab Packages\n      # Or via menu system: Packages>Load Packages  \n\n\n\n\nCarregar bases internas\n\ndata(aids)    # carregar base ‘aids’ (pacote ‘(KMsurv)’\n\n\n\n\nFechar um pacote\n\ndetach (\"package:name\") #detach data\n\n\n\n\nMais sobre pacotes\n\n\nsearch () # mostra pacotes abertos\n\nlibrary(help=KMsurv) # mostra info sobre pacote KMsurv\n.libPaths() # indica a localização da ‘library’, the ‘library’ subdirectory of R_HOME.\nlibrary () # cria script com todos os pacotes instalados e na library (ou olhar pestana FILES) \n\n\n\n\nAjudas\n\n\n?getwd     # information on the “getwd” function\n??getwd     # information on the “getwd” function\napropos (\"norm\")   # to find all functions in R that contains the string norm type)\n\n\n\n\nScripts\nAbrir um script já existente\nOpções a: > File -> Open File -> (search script and open)\nOpções b: > duplo-click no script, na janela FILES\nCriar um scrip\nOpção a:\n> File -> New File -> R Script\nOpção b:\nNa barra de ferramentas da janela SOURCE: > + -> R Script\nOpção c:\n> Ctrl + Schit + N (Mac)\nGuardando Scripts\nOpção a:\n> File -> New File -> R Script -> Save/Save as/\nOpção b:\n> usar o ícone da janela do script\n_ Executar comandos no Script\n> sublinhar comando ->Cmd+ENTER (Mac)\n\nsublinhar comando ->Ctrl+R (Windows)\n\nCarregar\nCarregar objetos do working directory\n\n\nload (\"objecto_y\")          \nload (\"objectox_yx\")        \nload (“Minhabase\")\nload (\"WorkspaceProj1\")    \n\nCarregar objetos de outros diretorios\n\nload (\"~/0R/AA\")  \n\n\n\n\nRecolher a posição de um ficheiro\n\nfile.choose()   \n\n\n\n\n\nSalvar\nSalvar objetos no working directory\n\nsave (y, file=\"object_y\")         # Guardar y como \"object_y\"   \nsave (y, x, file=\"object_yx\")      # Guardar y and x \nsave (minhabase, file=\"Minhabase.RData\")     # Guardar dataframe\nsave.image(file=\"WorkspaceProj1\")      # Guardar workspace\n\n\n\n\nSalvar objetos em outros directorios\n\nsave (AA, file= \"~/0R/AA\")  \n  # AA= obeto R\n  # \"~/0R/AA\"= posição e nome do objeto salvado\n\n\n\n\n\nSalvar Gráficos para pdf\n\n\n\npdf(“mygraph.pdf”) # create the file plot (x,) # execute the graphic dev.off() # finish the process\n\n# http://www.statmethods.net/interface/io.html \n\n\n\nSalvara outputs para um ‘text file’\nUsando sink() e imprimendo\n\n\n# a) Criar o ficheiro sink(“meu_documento.txt”)\n\n# b) Especificar um título interno print(“The mean of var1 x is…”)\n# c) produzir os dados (o output será imprimido no .txt, não na CONSOLA) mean (x) plot (x)\n# d) Finalizar o procedimento: sink() \n\n\n\nb Usando sink() e cat()\n\n# a) Criar o ficheiro    \nsink(\"meu_documento.txt\")\n\n# b) Concatenar    \ncat(\"A média de varX é...\", mean(varX), \"\\n\") \n\n# c) Finalizar o procedimento:\nsink()\n\n\n\nCopy and paste.\nUma opção frequente é simplesmente copiar os resultados da CONSOLA ou PLOTS colar num documento Word\nImportar bases\nBases Excel :\n> Environment -> Import Dataset -> From Excel\nBases SPSS > Environment -> Import Dataset -> From SPSS\nBases STATAEnvironment -> Import Dataset -> From STATA\nExportar\nPara xlsx\n\nlibrary (openxlsx)   \nwrite.xlsx(Df, \"Df.xlsx\")\n\n\n\n\nPara CSV\n\nwrite.table(Df, file=\"Df.csv\",sep=\",\",row.names=F)\n\n\n\n\nPara SPSS\n\nlibrary(foreign)\nwrite.foreign(mydata, \"c:/mydata.txt\", \"c:/mydata.sps\",   package=\"SPSS\")\n\n\n\n\nPara SPSS\n\nlibrary(foreign)\nwrite.dta(Df, \"Df.dta\") \n\n\n\n\n\nFechas Sessão\n\n\nq()   # fechar sessão \n\n\n\n\n\n\n",
      "last_modified": "2021-10-07T09:07:33+01:00"
    },
    {
      "path": "j3.3_variaveis_copy.html",
      "title": "Variables",
      "author": [],
      "contents": "\nApp.3: VARIAVEIS\nExploração de uma Variável\n\n\nclass(x)\n\nlength(x)\n\n\n\n\n\ntable(x)\ntable (is.na(x) )\n\n\n\n\n\nsort  (x)\nsum(x)\nmean (x)\nmedian(x)           \n\n\n\n\nObjects\nPedir a classe de um objeto\n\n\nclass (x)\n\n\n\n\nTestar classe\n\n  is.numeric(x)\n  is.character(x)\n  is.factor (x)\n  is.vector(x)\n  is.matrix(x)\n  is.data.frame(x)\n\n\n\n\n\nCoercionar a classe de um objeto\n\n\n  as.numeric()\nas.character()\nas.factor ()\nas.vector()\nas.matrix()\nas.data.frame() \n\n\n\n\nConvertir uma tabela em dataframe\n\nas.data.frame.matrix(mytable)\n\n\n\n\nOBS: Muita atenção quando se ‘coercionam’ factores com categorias numéricas. O resultado pode não ser o esperado…. (aquí mais info).\n\nObservar atributos de um objeto (não mostrados no output por defeito)\n(R não sempre apresenta no output toda a info do objeto)\n\n\n\nattributes(modelo1)\n\nstr(modelo1) \n\n\n\nAceder a atributos específicos\n\n\n# exemplo:\nmodelo1$Coef\n\n\n\n\n\nVariáveis ‘factor’\nFactorizar uma variável não factor\n\n\nv <- c(0, 1, 1, 0, 5,5, 0)\n\nf <- factor (v) class(f) \n\n\n[1] \"factor\"\n\nVisualizar ‘levels’ de uma factor\n\nlevels(f) \n\n\n\n[1] \"0\" \"1\" \"5\"\n\nAtribuir ‘labels’ de uma factor\n\n\nf <- factor(f, levels = c(0,1, 5), labels = c(“azul”, “verde”, “cinzento”))\n\nf \n\n\n[1] azul     verde    verde    azul     cinzento cinzento azul    \nLevels: azul verde cinzento\n\nRecodificar em 2 categorias\n\nf.2 <- ifelse(f==\"azul\",  \"A\", \"nonA\") \nf.2\n\n\n\n[1] \"A\"    \"nonA\" \"nonA\" \"A\"    \"nonA\" \"nonA\" \"A\"   \n\n\nRecodificar em 3 categorias\n\n\nage <- c(9, 9, 11, 14, 16, 30, 50)\n\nage.3 <- NA age.3 [age < 10] <- “child” age.3 [age >= 10 & age < 20] <- “teenager” age.3 [age >= 20] <- “adult”\nage.3 \n\n\n[1] \"child\"    \"child\"    \"teenager\" \"teenager\" \"teenager\" \"adult\"   \n[7] \"adult\"   \n\n\nMudar nome de um level (mais aqui)\n\nlibrary(plyr)\nf <- revalue(f, c(\"azul\"=\"AZUL\"))\nf\n\n\n\n[1] AZUL     verde    verde    AZUL     cinzento cinzento AZUL    \nLevels: AZUL verde cinzento\n\n\nEspecificar a categoría de referencia\n\nf <- relevel (f, \"verde\")   # ver ordem de \"Levels\"\nf\n\n\n\n[1] AZUL     verde    verde    AZUL     cinzento cinzento AZUL    \nLevels: verde AZUL cinzento\n\n\nAgregar uma categoria\n\nf <- factor(f, levels = c(levels(f), \"BRANCO\"))\nf\n\n\n\n\n\nEliminar uma categoria\n\nf <- f[f !=\"cinzento\"] # eliminar observações da categoria   \nf <- factor (f)    # re-factorizar (se eliminam todas as categorias sem obs)\nf\n\n\n\n[1] AZUL  verde verde AZUL  AZUL \nLevels: verde AZUL\n\n\nInvertir a ordem das ‘levels’\n\n\nf_rev  <- factor(f, levels = rev(levels(f)))\nf_rev\n\n\n\n\n\nReordenar ‘levels’ (mais aqui)\n\nf <- factor(f, levels = c(\"verde\", \"AZUL\"))\n\n\n\n\n\nReordenar var1 by var2 (exemplo)\n\n\n\nvar1 <- reorder(var1, var2)\n\nvar1 <- reorder(var1, -var2) # descending \n\n\n\n\nDica para ordenar levels de uma factor baseado na ordem das linhas numa base aqui\nIn short, if you have a data.frame with the rows in order and you want the levels of one of the columns to be in that same order,\nyou can use ´Df <- mutate(Df, col = factor(col, col))`.\n\n\nlibrary(dplyr)\nDf <- data.frame(\nnum = 5:1,\nword = c(\"five\", \"four\", \"three\", \"two\", \"one\"))\nlevels(Df$word) # levels are alphabetical by default\n\n\n\nNULL\n\nDf$word # right now the order is 5,4,3,2,1\n\n\n[1] \"five\"  \"four\"  \"three\" \"two\"   \"one\"  \n\nDf <- Df %>%\n  arrange(num) %>%   # rearrange the Df in the order we want (1,2,3,4,5)\n  mutate(word = factor(word, word)) # this line reorders the factor in the same order\nlevels(Df$word)  # now the levels are 1,2,3,4,5\n\n\n[1] \"one\"   \"two\"   \"three\" \"four\"  \"five\" \n\nMais sobre ordenar uma factor aqui \nNAs (valores em falta)\nDetectar NAs numa variável\n\n\ntable (is.na(x))\n\n\n\n\nTabela que não exclua NAs\n\n\ntable (x, exclude = FALSE)\n\n\n\n\n\nCalcular média duma variável com NAs\n\n\nmean(x, na.rm = TRUE)\n\n\n\n\n\nEliminar observações com NA numa variável\n\nDf <-subset( Df   ,   !is.na (sexo))  \n\n\n\n\n\nEliminar obs com NA em todas as variables da base Df\n\nDf <- na.omit (Df)        \n\n\n\n\n\nRecodificar NAs em 0\n\n\ny[is.na(y)] <- 0         # transforma “NA” de “y” en “0”\n\n\n\n\n\nRecodificar como NA\n\n\n\n(D$x[D$x==88] <- NA # recodificar x==88  em NA\n\n\nListar linhas com NAs\n\n\nDf[!complete.cases(Df),]\n\n\n\n\n\nCriar nova base sem NAs\n\n\nDF_new <- na.omit(DF)\n\n\n\n\n\nMore on Missing (Summing lots of Vectors; row-wise or elementwise, but ignoring NA values)\n\nSubsetting Vars\n\n\nx[1:10]          # ten first\nx[is.na(x)]      # missings of x\n\nx[!is.na(x)]    # not missings of x\n \ny <- x[!is.na(x)]    # not missings of x\n\nx[!is.na(x) & x>5]  # Combining our knowledge of logical operators with our new knowledge of subsetting\n\nx[c(3,5,7)]\n\nx[0]\n\nx[3000]\n\nx[c(-2,-10)]\n\nx[-c(2,10)]\n\n\n\n\nDate Vectors\nDATE conversor: How can I format a string containing a date into R “Date” object?\nimportar de excel a STATA:\n\n\n\n# magic number -20454 (o -21916, segun Cecilia # transformar en n??mero, restar 20454, y asignar formato %td\n\n# generate statadate =date-20454 # generate statadate =date-21916 \n\n\n\nTransformar String, com formato: “10/08/84”\n\nx <- c(\"10/08/84\", \"10/08/84\", \"10/08/84\")\n\n\n\n\n\n\ndates <- as.Date(x, format= \"%d / %m /%y\")  # en 'format' indicar ordem da variável string\ndates\n\n\n[1] \"1984-08-10\" \"1984-08-10\" \"1984-08-10\"\n\nclass(dates)\n\n\n[1] \"Date\"\n\ndates2a <- format(dates, format=\"%d  /%B   / %Y\")\ndates2a\n\n\n[1] \"10  /August   / 1984\" \"10  /August   / 1984\"\n[3] \"10  /August   / 1984\"\n\ndates2b <- format(dates, format=\"%d  /%B   / %y\")\ndates2b\n\n\n[1] \"10  /August   / 84\" \"10  /August   / 84\" \"10  /August   / 84\"\n\ndates2c <- format(dates, format=\"%d  /%b   / %Y\")\ndates2c\n\n\n[1] \"10  /Aug   / 1984\" \"10  /Aug   / 1984\" \"10  /Aug   / 1984\"\n\nTransformar String, com formato: “10-Aug-79”\n\n\ny <- c(\"10-Aug-79\", \"10-Aug-79\", \"10-Aug-79\")\ny\n\n\n\n[1] \"10-Aug-79\" \"10-Aug-79\" \"10-Aug-79\"\n\nd3 <- as.Date (y, format=\"%d - %B - %y\")\nd3\n\n\n[1] \"1979-08-10\" \"1979-08-10\" \"1979-08-10\"\n\nd3c <- format(d3, format=\"%d  /%B   / %Y\")\nd3c\n\n\n[1] \"10  /August   / 1979\" \"10  /August   / 1979\"\n[3] \"10  /August   / 1979\"\n\nSTRING VECTORS\n[https://stringr.tidyverse.org/reference/str_order.html]\n\n\nx <- c(\"xx\", \"zz\", \"aa\")\n\nlibrary( tidyverse)\nstr_sort(x)\n\n\n[1] \"aa\" \"xx\" \"zz\"\n\n\n\n\n",
      "last_modified": "2021-10-07T09:07:41+01:00"
    },
    {
      "path": "j3.4_dataframes_copy.html",
      "title": "Dataframes",
      "author": [],
      "contents": "\nApp.3: Dataframes\nCriação de uma base\n\n\nDf <-data.frame (\n      id = c(1, 2, 3, 3, 5),\n      cigarros = c(15, 19, 14, 12, 15),\n      sexo = c(0, 1, 1, 0,0),\n      cidade = c(\"Lisboa\", \"Lisboa\", \"Porto\", \"Lisboa\", \"Portimão\"),\n      grupo = c(\"A\", \"C\", \"C\", \"B\", \"B\"),\n      stress = c (4,4,2,1,39))\n\n\n\nExploração Dataset\n\n\nclass (Df)     # classe\n\n\n\n\n\nnrow (Df) # número de linhas     \n\n\n\n\n\nncol (Df)   # número de colunas     \n\n\n\n\n\ndim(Df)  # dimensão (linhas & colunas)   \n\n\n\n\n\nnames (Df)  # nome das variáveis da base      \n\n\n\n\n\nhead (Df, 3)  # Primeiras 13 observações    \n\n\n\n\n\ntail (Df, 2)   # Ultimas 10 observações    \n\n\n\n\n\nstr (Df) # Estrutura da base     \n\n\n\n\n\nobject.size(Df) # tamanho em bytes\n\n\n\n\n\nsummary(Df)   # Summario para cada variável     \n\n\n\nParênteses retos sobre bases de dados\n\n\nDf [1  , ]     # linha 1     , colunas todas\n\n\n\n\n\nDf [ ,3 ]      # linhas todas, coluna 3\n\n\n\n\n\nDf [1  ,3 ]     #  linha 1     , coluna 3\n\n\n\n\n\nDf [1:4, ]   # linhas 1 a 4  , colunas todas\n\n\n\n\n\nDf [ , 2:5]   # linhas todas  , colunas 2 a 5\n\n\n\n\n\nDf [c(1,2,3,4), c(2,3,4,5)]\n\n\n\n\n\nDf [  ,-c(1,2)]   # linhas todas, colunas todas menos 1 e 2\n\n\n\n\nid’s duplicados\nDeteção dos id’s duplicados\n\n\ntmm <- table (Df$id)   ; tmm <- as.data.frame(tmm)\nNcases <-max(tmm$Freq)\nifelse (Ncases==1, \"OK, no double id\", \"Double id detected.\")\n\n\n[1] \"Double id detected.\"\n\n\nIdentificar id’s duplicado\n\n\nqqq <- Df$id[tmm$Freq>1]\nDf[which(Df$id==qqq),]\n\n\n  id cigarros sexo cidade grupo stress\n3  3       14    1  Porto     C      2\n4  3       12    0 Lisboa     B      1\n\n\nlinhas duplicados\nDetetar linhas duplicadas (duplicated rows)\n\n\na <- c(rep(\"A\", 3), rep(\"B\", 3), rep(\"C\",2))\nb <- c(1,1,2,4,1,1,2,2)\nDf2 <-data.frame(a,b)\nDf2\n\n\n  a b\n1 A 1\n2 A 1\n3 A 2\n4 B 4\n5 B 1\n6 B 1\n7 C 2\n8 C 2\n\nListar linhas duplicados…\n\n\nDf2[duplicated(Df2), ]\n\n\n  a b\n2 A 1\n6 B 1\n8 C 2\n\n\nListar linhas não duplicados…\n\n\nDf2[!duplicated(Df2), ]\n\n\n  a b\n1 A 1\n3 A 2\n4 B 4\n5 B 1\n7 C 2\n\n\nCriação de variáveis\nNova variável\n\n\nDf$var6 <- 1        # crea var4 =1\n\n\n\n\n\nDf$var7 <- Df$var6 + Df$stress        # crea var5 = var1  + var3\n\n\n\n\n\nDf$idade <- c(21,32,13,54,15)     # creates age\n\n\n\n\n\nDf\n\n\n  id cigarros sexo   cidade grupo stress var6 var7 idade\n1  1       15    0   Lisboa     A      4    1    5    21\n2  2       19    1   Lisboa     C      4    1    5    32\n3  3       14    1    Porto     C      2    1    3    13\n4  3       12    0   Lisboa     B      1    1    2    54\n5  5       15    0 Portimão     B     39    1   40    15\n\n\nVariável ID\n\n\nDf$id3  <-  1: nrow(Df) \n\nDf$id4  <-  1:length(Df$cigarros) \n\n\n\nID with letters (instead of números)\n\n\nDf$idl <- letters [1:nrow(Df)]\n\n\n\n\n\n\nDf\n\n\n  id cigarros sexo   cidade grupo stress var6 var7 idade id3 id4 idl\n1  1       15    0   Lisboa     A      4    1    5    21   1   1   a\n2  2       19    1   Lisboa     C      4    1    5    32   2   2   b\n3  3       14    1    Porto     C      2    1    3    13   3   3   c\n4  3       12    0   Lisboa     B      1    1    2    54   4   4   d\n5  5       15    0 Portimão     B     39    1   40    15   5   5   e\n\n\nCrear uma sequência dentro de um grupo\n(several ways)\nCom o pacote base, usar ave:\n\nDf$id_spell_sex <- with(Df, ave(rep(1, nrow(Df)), sexo, FUN = seq_along))\n\nDf[order(Df$sexo), c(\"id\",\"sexo\", \"id_spell_sex\")]\n\n\n  id sexo id_spell_sex\n1  1    0            1\n4  3    0            2\n5  5    0            3\n2  2    1            1\n3  3    1            2\n\nCom o pacote “dplyr” package\n\n\nlibrary(dplyr)\nDf <-Df %>% group_by(cidade) %>% mutate(id_spell_cidade = row_number(cidade))\n\nDf[order(Df$cidade), c(\"id\",\"cidade\", \"id_spell_cidade\")]\n\n\n\nEliminar colunas e linhas\nEliminar colunas (variáveis)\nVarias opções\n\nDf$stress    <- NULL\nS[4]     <- NULL      \nS [\"stress\"]  <- NULL  \n\n\n\n\n\nS <- S[,-4]   \n\n\n\n\nEliminar linhas (observaçoes)\n\n\nS<-S[-39,]     # elimina row 39 \n\n\n\n\nMudar nome de variáveis\nTodas variáveis\n\n\nnames (S) <- c(\"Q1\", \"Q2\", \"Q3\")   # list in ORDER ALL the vars of S\n\n\n\nPor posição: :\n\n\nnames(S)[3] <- \"Country\"  \n\n\n\nPor nome:\n\n\nnames(Df) [names(Df)==\"cigarros\"] <- \"cig\"  \n\n\n\ncom o plyr package:\n\n\nlibrary(plyr)\nS <- rename(S, c(\"oldname\"=\"newname\", \"oldname\"=\"newname\"))  \n\n\n\ncom o reshape package:\n\n\nlibrary(reshape)  \nS <- rename(S, c(var1=\"x1\"))    \n\n\n\n\nReordenar variáveis\nPor posição:\n\n\ndata <- data[,c(1:3,5,4)]\n\n\n\nPor nome:\n\n\nnames <- c(\"v1\", \"v2\", \"v3\", \"v5\", \"v4\") \ndata <- data[names]\n\n\n\n\nOrdenar variáveis (sort())\n\n\nsort(Df$cigarros)\n\n\n\n\nOrdenar a base (order())\n\nDf [order(Df$cigarros),]             # ordenar Df por cigarros\n\nDf [order(Df$cigarros, Df$stress),] # ... por cigarros e stress\n\nDf [order(Df$cigarros, -Df$stress),] #  ... por cigarros (asc) e stress\n\n[order(Df$cigarros, -Df$stress),]   # por cigarros(asc.) e stress (desc.)\n\n\nRownames\nVisualizar os nomes das linhas da base\n\n\nrownames (Df)             \n\n\n\n\nMudar rownames\n\n\nrownames (Df)  <- 1:5\n\n\n\n\nEliminar rownames\n\n\nrow.names(Df) <- NULL \n\n\n\n\nsubset datasets\nUsing [c() ]\n\n\nDf[c(\"sexo\", \"cidade\")]    #subset including sexo, cidade\nDf[c( 3,4)]        #idem\n\nDf[c(-1, -3)]      #subset excluindo v1,v3\nDf[- c(1, 3)]      #idem\n\n\n\nUsando [ , ] based on variables’ positions\n\n\nS[1:5,    ]        # first 5 observations(S[   , 1:3]        # first 3 columns\n\n\n\nUsing [(which() , ] based on variables’ values\n\ns <- S[which(Df$m!=99)          ,      ]\ns <- S[which(Df$m!=99 & nivel<3),      ]\ns <- S[which(Df$m!=99 & nivel<3 ,c(2,3) ]\n\nUsing subset ()\n\n\ns <- subset (S, year <= 1983,   select=c(year, min)) \n\n\n\n\nMERGE\n‘Merge’ duas bases ‘by ID’\n\n\ntotal <- merge(dataframeA, dataframeB, by=\"id\")\n\n\n\n\n\ntotal <- merge(dataframeX, dataframeY, by=\"id\", all.x=TRUE )\n\n\n\nExtra rows will be added to the output, one for each row in x that has no matching row in y.\n\n\ntotal <- merge(dataframeX, dataframeY, by=\"id\", all.y=TRUE )\n\n\n\nExtra rows will be added to the output, one for each row in y that has no matching row in x. \n\n\ntotal <- merge(dataframeA, dataframeB, by=\"id\", all=TRUE )\n\n\n\n\n‘Merge’ mais de duas bases Link\nWhat if I have 20 files with data that I want to match observation-to-observation? Assuming they all have a common column that allows merging, I would still have to read 20 files in (20 lines of code) and merge() works two-by-two… so I could merge the 20 data frames together with 19 merge statements like this:\nmytempdata = merge(myDf, mydata2)(mytempdata = merge(mytempdata, mydata3)(.((mytempdata = merge(mytempdata, mydata20)\n\nThat’s tedious. You may be looking for a simpler way. If you are, I wrote a function to solve your woes called multmerge().* Here’s the code to define the function:\n\nmultmerge = function(mypath){\nfilenames=list.files(path=mypath, full.names=TRUE)\ndatalist = lapply(filenames, function(x){read.csv(file=x,header=T)})\nReduce(function(x,y) {merge(x,y)}, datalist)\n\n\nANOTHER solution is to use dplyr package and it’s inner_join as follows:\n\n\nlibrary(dplyr)\ndf <- inner_join(df1, df2)\ndf <- inner_join(df, df3)\n\n\n\n\n‘Merge’ rows\nTo join two data frames (datasets) vertically, use the rbind function.\ntotal <- rbind(data frameA, data frameB)\n\nThe two data frames must have the same variables, but they do not have to be in the same order.\nIf data frameA has variables that data frameB does not, then either: a. Delete the extra variables in data frameA or b. Create the additional variables in data frameB and set them to NA (missing) before joining them with rbind( ).\n‘Merge’ colums\n\ncbind ???\n\n\nRESHAPE\n(mais info aqui)\nData is considered as\n- wide format (one row per subject) when there is one observation row per subject with each measurement present as a different variable and\n- long format (multiple rows per subject) when there is one observation row per measurement.\nde Wide a Long format?\n\n\nFALSE\n\n\n\n\nde Long a Wide\n\n\nlibrary (reshape2)\n\ndata_wide <- dcast(Df,   port_field + port_ch ~ port_spell_matrix, value.var=\"port_field\")\nView(data_wide2)\n\n\n\n\nVariables: sumar por columnas\nCrear una variable summando varias\n\n\nD$cabsize <- mapply(sum, Df$inner, Df$minister)\n\ndataFrame$newColumn <- mapply(someFunction, dataFrame$column1, dataFrame$column2, dataFrame$column3)\n\n\n\n\nVariables: sumar por grupo [ISTO A DATAFRAME section]\n\n\nlibrary (plyr)\nddply(rr,                       # dataset\n      c('year', 'nivelf'),      # 'column(s) name of a factor to group by'\n      transform,                # OR summarize  \n      TOTinterA1 = sum (interA1))\n\nddply(rr,                       \n      c('year', 'nivelf'),      \n      transform,\n      TOTgestA1 = sum (gestA1),\n      TOTcoordA1 = sum (coordA1),\n      TOTinterA1 = sum (interA1),\n      TOTastecdA1 = sum (astecA1),\n      TOTaspolA1 = sum (aspolA1))\n\nnewrr <- companiesData %.%  group_by(company)               %.% mutate (highestMargin = max(margin), lowestMargin = min(margin)) \nnewrr <- rr            %>% group_by (year,nivelf)  %>% mutate (TOTgestA1 = sum (gestA1),\nTOTcoordA1 = sum (coordA1),\nTOTinterA1 = sum (interA1),\nTOTastecdA1 = sum (astecA1),\nTOTaspolA1 = sum (aspolA1))\nnewrr\nclass(newrr)\nnr<-as.data.frame(newrr)\n\n\n\n\ndplyr package\nPACKAGE FOR Managing Data Frames:\nThe dplyr package does not provide any “new” functionality to R per se but it greatly simplifies existing functionality in R.\n- select: return a subset of the columns of a data frame, using a flexible notation\n- filter: extract a subset of rows from a data frame based on logical conditions\n- arrange: reorder rows of a data frame\n- rename: rename variables in a data frame\n- mutate: add new variables/columns or transform existing variables\n- summarise / summarize: generate summary statistics of different variables in the (data frame, possibly within strata\n- %>% : connect multiple verb actions together into a pipeline\nStructure of the function:\na. The first argument is a data frame.\na. The subsequent arguments describe what to do with the data frame specified in the first argument, and you can refer to columns in the data frame directly without using the $ operator (just use the column names).\na. The return result of a function is a new data frame\nSelect()\n\nnames (A)\nA1 <- select (A, var1:var3)    # select specific variables\nA1 <- select (A, - (var1:var3) ) # omit specific variables\n\n\n\n\nfilter()\nThis function is used to extract subsets of rows from a data frame.\n\n\nA1 <- filter(A, var1 > 30 & var2 > 80)\n\n\n\n\narrange()\nThis function is used to reorder rows of a data frame according to one of the variables/columns.\n\nA1 <- arrange(A, date)\n\n\n\n\nrename()\nRenaming a variable in a data frame in R is surprisingly hard to do! This function is designed to make this process easier.\n\n\nA1 <- rename(A, nameofnewvar1 = nameOldV2,  nameofnewvar1 = nameOldV2)\n\n\n\n\nmutate()\nThis function exists to compute transformations of variables in a data frame.\n\n\nA1 <- mutate (A, nameNewVar = var1 - mean(var1, na.rm = TRUE)) \n\n\n\n\ngroup_by()\nThis function is used to generate summary statistics from the data frame within strata defined by a variable.\n\n\nFALSE\n\n\n\n\n%>%\nThis operater is very handy for stringing together multiple dplyr functions in a sequence of operations. Notice above that every time we wanted to apply more than one function, the sequence gets buried in a sequence of nested function calls that is difficult to read, i.e.\n\n\nthird(second(first(x)))\n\n\n\nThis nesting is not a natural way to think about a sequence of operations. The %>% operator allows you to string operations in a left-to-right fashion, i.e.\n\nfirst(x) %>% second %>% third(\n\n\n\n\n\n",
      "last_modified": "2021-10-07T09:07:43+01:00"
    },
    {
      "path": "j3.5_tables_copy.html",
      "title": "Tables",
      "author": [],
      "contents": "\n\n\n\n",
      "last_modified": "2021-10-07T09:07:43+01:00"
    },
    {
      "path": "j3.6_graficos_copy.html",
      "title": "Gráficos",
      "author": [],
      "contents": "\n\n\n\n",
      "last_modified": "2021-10-07T09:07:44+01:00"
    }
  ],
  "collections": []
}
